/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

#define _BASE    0
#define _NUM_SYM 1
#define _NAVI    2
#define _FKEYS   3
#define _NUMPAD  4

// &led_strip { chain-length = <11>; };

/ {
    macros {
        to_BASE: to_BASE {
            label = "ZM_to_BASE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&rgb_ug RGB_COLOR_HSB(15,95,3)>
//                , <&rgb_ug RGB_ON>
                , <&to _BASE>
                ;
        };

        to_NAVI: to_NAVI {
            label = "ZM_to_NAVI";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&rgb_ug RGB_COLOR_HSB(80,100,3)>
//                , <&rgb_ug RGB_ON>
                , <&to _NAVI>
                ;
        };

        mo_NAVI: mo_NAVI {
            label = "ZM_mo_NAVI";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_tap &rgb_ug RGB_COLOR_HSB(80,100,3)>
                , <&macro_press &mo _NAVI>
                , <&macro_pause_for_release>
                , <&macro_tap &rgb_ug RGB_COLOR_HSB(15,95,3)>
                , <&macro_release &mo _NAVI>
                ;
        };

        mo_NUM_SYM: mo_NUM_SYM {
            label = "ZM_mo_NUM_SYM";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_tap &rgb_ug RGB_COLOR_HSB(10,80,3)>
                , <&macro_press &mo _NUM_SYM>
                , <&macro_pause_for_release>
                , <&macro_tap &rgb_ug RGB_COLOR_HSB(15,95,3)>
                , <&macro_release &mo _NUM_SYM>
                ;
        };

        mo_FKEYS: mo_FKEYS {
            label = "ZM_mo_FKEYS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_tap &rgb_ug RGB_COLOR_HSB(300,100,3)>
                , <&macro_press &mo _FKEYS>
                , <&macro_pause_for_release>
                , <&macro_tap &rgb_ug RGB_COLOR_HSB(15,95,3)>
                , <&macro_release &mo _FKEYS>
                ;
        };

        to_NUMPAD: to_NUMPAD {
            label = "ZM_to_NUMPAD";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&rgb_ug RGB_COLOR_HSB(200,100,3)>
//                , <&rgb_ug RGB_ON>
                , <&to _NUMPAD>
                ;
        };

        to_BOOT: to_BOOT {
            label = "ZM_to_BOOT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&rgb_ug RGB_COLOR_HSB(0,100,100)>
                , <&rgb_ug RGB_ON>
                , <&bootloader>
                ;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_RESET {
            timeout-ms = <50>;
            key-positions = <36 40>;
            bindings = <&rch A A>;
            layers = <_NUMPAD>;
        };

        combo_LPAR {
            timeout-ms = <50>;
            key-positions = <14 15>;
            bindings = <&kp LPAR>;
            layers = <_BASE _NUM_SYM>;
        };

        combo_RPAR {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp RPAR>;
            layers = <_BASE _NUM_SYM>;
        };

        combo_LBRC {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&kp LBRC>;
            layers = <_BASE _NUM_SYM>;
        };

        combo_RBRC {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&kp RBRC>;
            layers = <_BASE _NUM_SYM>;
        };

        combo_LBKT {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&kp LBKT>;
            layers = <_BASE _NUM_SYM>;
        };

        combo_RBKT {
            timeout-ms = <50>;
            key-positions = <32 33>;
            bindings = <&kp RBKT>;
            layers = <_BASE _NUM_SYM>;
        };

        combo_LT {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&kp LT>;
            layers = <_BASE _NUM_SYM>;
        };

        combo_GT {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp GT>;
            layers = <_BASE _NUM_SYM>;
        };
    };
};

&sk {
    quick-release;
};

/ {
    behaviors {
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LOCK_NAVI";
            #binding-cells = <0>;
            tapping-term-ms = <600>;
            bindings = <&mo_NAVI>, <&to_NAVI>;
        };
 
        td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "LOCK_NUMPAD";
            #binding-cells = <0>;
            tapping-term-ms = <600>;
            bindings = <&mo_FKEYS>, <&to_NUMPAD>;
        };

        td3: tap_dance_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "CTRL_COPY_PASTA";
            #binding-cells = <0>;
            tapping-term-ms = <500>;
            bindings = <&kp LC(C)>, <&kp LC(V)>;
        };

        td4: tap_dance_4 {
            compatible = "zmk,behavior-tap-dance";
            label = "GUI_COPY_PASTA";
            #binding-cells = <0>;
            tapping-term-ms = <500>;
            bindings = <&kp LG(C)>, <&kp LG(V)>;
        };

        ctrl_x: ctrl_x {
                compatible = "zmk,behavior-hold-tap";
                label = "CTRL_CUT_HOLD";
                #binding-cells = <2>;
                flavor = "tap-preferred";
                tapping-term-ms = <500>;
                bindings = <&kp>, <&td3>;
        };

        gui_x: gui_x {
                compatible = "zmk,behavior-hold-tap";
                label = "GUI_CUT_HOLD";
                #binding-cells = <2>;
                flavor = "tap-preferred";
                tapping-term-ms = <500>;
                bindings = <&kp>, <&td4>;
        };

        gqt: global-quick-tap {
                compatible = "zmk,behavior-hold-tap";
                label = "GLOBAL_QUICK_TAP";
                #binding-cells = <2>;
                flavor = "tap-preferred";
                tapping-term-ms = <200>;
                quick-tap-ms = <150>;
                global-quick-tap;
                bindings = <&kp>, <&kp>;
        };

        spctap: space-tap {
                compatible = "zmk,behavior-hold-tap";
                label = "SPACE_TAP_MO_SYM_HOLD";
                #binding-cells = <2>;
                flavor = "tap-preferred";
                tapping-term-ms = <200>;
                quick-tap-ms = <150>;
                global-quick-tap;
                bindings = <&mo_NUM_SYM>, <&kp>;
        };

        rch: reset-combo-hold {
                compatible = "zmk,behavior-hold-tap";
                label = "RESET_COMBO_HOLD";
                #binding-cells = <2>;
                flavor = "tap-preferred";
                tapping-term-ms = <3000>;
                bindings = <&to_BOOT>, <&sys_reset>;
        };
    };

        keymap {
                compatible = "zmk,keymap";

                base_layer {
// ---------------------------------------------------------------------------
// |  Q  |  W  |  F  |  P  |  B  |    |   |    |  J  |  L  |  U  |  Y  |  '  |
// |  A  |  R  |  S  |  T  |  G  |    |   |    |  M  |  N  |  E  |  I  |  O  |
// |  Z  |  X  |  C  |  D  |  V  |    |   |    |  K  |  H  |  ,  |  .  |  /  |
//             | _NAVI | SHIFT(BKSPC) |   | _NUM_SYM(SPC) | _FKEYS(_NUMPAD) |
                        bindings = <
   &kp Q &kp W &kp F &kp P &kp B &none      &none &kp J &kp L &kp U     &kp Y   &kp SQT
   &kp A &kp R &kp S &kp T &kp G &none      &none &kp M &kp N &kp E     &kp I   &kp O
   &kp Z &kp X &kp C &kp D &kp V &none      &none &kp K &kp H &kp COMMA &kp DOT &kp FSLH
                &td0 &gqt LSHIFT BSPC &none &spctap X SPACE &td1
                        >;
                };

                num_sym_layer {
// ---------------------------------------------------------------------------
// |  !  |  @  |  #  |  $  |  %  |    |   |    |  ^  |  &  |  *  |  (  |  )  |
// |  1  |  2  |  3  |  4  |  5  |    |   |    |  6  |  7  |  8  |  9  |  0  |
// | "|" |  `  |  ~  |  _  |  =  |    |   |    |  +  |  -  |  ;  |  :  |  \  |
//                     | SPACE |      |   |      | RET |
                        bindings = <
   &kp EXCL &kp AT    &kp HASH  &kp DLLR  &kp PRCNT &none      &none &kp CARET &kp AMPS  &kp ASTRK &kp LPAR  &kp RPAR
   &kp N1   &kp N2    &kp N3    &kp N4    &kp N5    &none      &none &kp N6    &kp N7    &kp N8    &kp N9    &kp N0
   &kp PIPE &kp GRAVE &kp TILDE &kp UNDER &kp EQUAL &none      &none &kp PLUS  &kp MINUS &kp SEMI  &kp COLON &kp BSLH
                                        &kp SPACE &trans &none &trans &kp RET
                        >;
                };

                navi_layer {
// -----------------------------------------------------------------------------------------
// | ESC    |      | c,v,x | c,v,x | PRSC |    |   |    | PGUP | HOME |  UP  | END  | DEL   |
// | sSHIFT | sALT | sCTRL | sGUI  | INS  |    |   |    | PGDN | LEFT | DOWN | RGHT | SHIFT |
// |   Z    |      |       | TAB   | APP  |    |   |    |      | TAB  |      |      | RET   |
//                              | _BASE |      |   | SPACE | _BASE |
                        bindings = <
   &kp ESC    &none    &ctrl_x LC(X) X &gui_x LG(X) X &kp PSCRN &none      &none &kp PG_UP &kp HOME &kp UP   &kp END   &kp DEL
   &sk LSHIFT &sk LALT &sk LCTRL       &sk LGUI       &kp INS   &none      &none &kp PG_DN &kp LEFT &kp DOWN &kp RIGHT &kp LSHIFT
   &kp Z      &none    &none           &kp TAB        &kp K_APP &none      &none &none     &kp TAB  &none    &none     &kp RET
                                       &to_BASE &trans &none &kp SPACE &to_BASE
                        >;
                };

                fkeys_layer {
// -----------------------------------------------------------------------------------
// | ESC | F1 | F2  | F3  | F4  |    |   |    | CALC | c,v,x | c,v,x |      |  DEL   |
// |     | F5 | F6  | F7  | F8  |    |   |    | INS  | sGUI  | sCTRL | sALT | sSHIFT |
// |  Z  | F9 | F10 | F11 | F12 |    |   |    | APP  |  TAB  |       |      |  RET   |
//                    | _BASE |      |   | SPACE | _BASE |
                        bindings = <
   &kp ESC &kp F1 &kp F2  &kp F3  &kp F4  &none      &none &kp C_AL_CALC &gui_x LG(X) X &ctrl_x LC(X) X &none    &kp DEL
   &none   &kp F5 &kp F6  &kp F7  &kp F8  &none      &none &kp INS       &sk LGUI       &sk LCTRL       &sk LALT &sk LSHIFT
   &kp Z   &kp F9 &kp F10 &kp F11 &kp F12 &none      &none &kp K_APP     &kp TAB        &none           &none    &kp RET
                               &to_BASE &trans &none &kp SPACE &to_BASE
                        >;
                };

                numpad_layer {
// ---------------------------------------------------------------------------------------
// | ESC     | PREV | PLAYP | NEXT | BT CLR  |    |   |    |  /  |  7  |  8  |  9  |  -  |
// | RGB_TOG | VOL- | MUTE  | VOL+ | OUT_TOG |    |   |    |  *  |  4  |  5  |  6  |  +  |
// | BT1     | BT2  | BT3   | BT4  | BT5     |    |   |    |  .  |  1  |  2  |  3  |  0  |
//                                | _BASE | BKSPC |   | ENTER | _BASE |
                        bindings = <
   &kp ESC         &kp C_PREV   &kp C_PP     &kp C_NEXT   &bt BT_CLR    &none      &none  &kp KP_DIVIDE    &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS
   &rgb_ug RGB_TOG &kp C_VOL_DN &kp C_MUTE   &kp C_VOL_UP &out OUT_TOG  &none      &none  &kp KP_MULTIPLY  &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_PLUS
   &bt BT_SEL 0    &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4  &none      &none  &kp KP_DOT       &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_N0
                                                        &to_BASE &kp BSPC &none &kp KP_ENTER &to_BASE
                        >;
                };
        };
};
