/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include "keypos_34keys.h"

#define _BASE    0
#define _SYM     1
#define _NAV     2
#define _BTF     3

#define RGB_BASE RGB_COLOR_HSB(250,20,3)
#define RGB_NAV RGB_COLOR_HSB(20,100,4)
#define RGB_BTF RGB_COLOR_HSB(200,100,3)
#define RGB_SYM RGB_COLOR_HSB(250,100,4)

&sk {
    quick-release;
};

&sl {
    release-after-ms = <300>;
};

/ {
    // conditional_layers {
    //     compatible = "zmk,conditional-layers";
    //     tri_layer {
    //         if-layers = <1 2>;
    //         then-layer = <4>;
    //     };
    // };

    macros {
        to_BASE: to_BASE {
            label = "ZM_to_BASE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&rgb_ug RGB_BASE>
                , <&to _BASE>
                ;
        };

        mo_SYM: mo_SYM {
            label = "ZM_mo_SYM";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_tap &rgb_ug RGB_SYM>
                , <&macro_press &mo _SYM>
                , <&macro_pause_for_release>
                , <&macro_tap &rgb_ug RGB_BASE>
                , <&macro_release &mo _SYM>
                ;
        };

        to_SYM: to_SYM {
            label = "ZM_to_SYM";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&rgb_ug RGB_SYM>
                , <&to _SYM>
                ;
        };

        to_NAV: to_NAV {
            label = "ZM_to_NAV";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&rgb_ug RGB_NAV>
                , <&to _NAV>
                ;
        };

        mo_NAV: mo_NAV {
            label = "ZM_mo_NAV";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_tap &rgb_ug RGB_NAV>
                , <&macro_press &mo _NAV>
                , <&macro_pause_for_release>
                , <&macro_tap &rgb_ug RGB_BASE>
                , <&macro_release &mo _NAV>
                ;
        };

        // to_BTF: to_BTF {
        //     label = "ZM_to_BTF";
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&rgb_ug RGB_BTF>
        //         , <&to _BTF>
        //         ;
        // };

        mo_BTF: mo_BTF {
            label = "ZM_mo_BTF";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_tap &rgb_ug RGB_BTF>
                , <&macro_press &mo _BTF>
                , <&macro_pause_for_release>
                , <&macro_tap &rgb_ug RGB_BASE>
                , <&macro_release &mo _BTF>
                ;
        };

        to_BOOT: to_BOOT {
            label = "ZM_to_BOOT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_COLOR_HSB(0,100,50)>
                , <&rgb_ug RGB_ON>
                , <&bootloader>
                ;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_RESET {
            timeout-ms = <50>;
            key-positions = <LBR RBR>;
            bindings = <&to_BOOT>;
            layers = <_BTF>;
        };

        combo_BTF {
            timeout-ms = <50>;
            key-positions = <LHI RHI>;
            bindings = <&mo_BTF>;
        };

        combo_NAV {
            timeout-ms = <50>;
            key-positions = <RTI RTM RTR>;
            bindings = <&to_NAV>;
            layers = <_BASE _SYM>;
        };

        combo_BASE {
            timeout-ms = <50>;
            key-positions = <RMI RMM RMR>;
            bindings = <&to_BASE>;
            layers = <_NAV _SYM>;
        };

        combo_SYM {
            timeout-ms = <50>;
            key-positions = <RBI RBM RBR>;
            bindings = <&to_SYM>;
            layers = <_BASE _NAV>;
        };

        // combo_ESC {
        //     timeout-ms = <40>;
        //     key-positions = <LTP LTR>;
        //     bindings = <&kp ESC>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_TAB {
        //     timeout-ms = <40>;
        //     key-positions = <LMP LMR>;
        //     bindings = <&kp TAB>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_DEL {
        //     timeout-ms = <40>;
        //     key-positions = <RTR RTP>;
        //     bindings = <&kp DEL>;
        //     layers = <_BASE _SYM _BT_NP>;
        // };
            
        // combo_RET {
        //     timeout-ms = <40>;
        //     key-positions = <RMR RMP>;
        //     bindings = <&kp RET>;
        //     layers = <_BASE _SYM _BT_NP>;
        // };
            
        combo_CAPS {
            timeout-ms = <50>;
            key-positions = <LMM LMI LMR>;
            bindings = <&caps_word>;
            layers = <_BASE _SYM>;
        };

        combo_LPAR {
            timeout-ms = <40>;
            key-positions = <LMM LMI>;
            bindings = <&kp LPAR>;
            layers = <_BASE _SYM>;
        };

        combo_RPAR {
            timeout-ms = <40>;
            key-positions = <RMI RMM>;
            bindings = <&kp RPAR>;
            layers = <_BASE _SYM>;
        };

        combo_LBRC {
            timeout-ms = <40>;
            key-positions = <LTM LTI>;
            bindings = <&kp LBRC>;
            layers = <_BASE _SYM>;
        };

        combo_RBRC {
            timeout-ms = <40>;
            key-positions = <RTI RTM>;
            bindings = <&kp RBRC>;
            layers = <_BASE _SYM>;
        };

        combo_LBKT {
            timeout-ms = <40>;
            key-positions = <LBM LBI>;
            bindings = <&kp LBKT>;
            layers = <_BASE _SYM>;
        };

        combo_RBKT {
            timeout-ms = <40>;
            key-positions = <RBI RBM>;
            bindings = <&kp RBKT>;
            layers = <_BASE _SYM>;
        };

        // combo_COMMA {
        //     timeout-ms = <40>;
        //     key-positions = <LMR LMM>;
        //     bindings = <&kp COMMA>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_DOT {
        //     timeout-ms = <40>;
        //     key-positions = <RMR RMM>;
        //     bindings = <&kp DOT>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_X {
        //     timeout-ms = <40>;
        //     key-positions = <LMR LMM>;
        //     bindings = <&kp X>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_W {
        //     timeout-ms = <40>;
        //     key-positions = <RMR RMM>;
        //     bindings = <&kp W>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_SEMI_COL {
        //     timeout-ms = <40>;
        //     key-positions = <RMR RMM>;
        //     bindings = <&sem_col>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_SEMI {
        //     timeout-ms = <40>;
        //     key-positions = <LBR LBM>;
        //     bindings = <&kp SEMICOLON>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_COLON {
        //     timeout-ms = <40>;
        //     key-positions = <RBR RBM>;
        //     bindings = <&kp COLON>;
        //     layers = <_BASE _SYM>;
        // };

        combo_COM_SEM {
            timeout-ms = <45>;
            key-positions = <LMR LMM>;
            bindings = <&com_sem>;
            layers = <_BASE _SYM>;
        };

        combo_DOT_COL {
            timeout-ms = <45>;
            key-positions = <RMR RMM>;
            bindings = <&dot_col>;
            layers = <_BASE _SYM>;
        };

        combo_COLON {
            timeout-ms = <45>;
            key-positions = <RBR RBM>;
            bindings = <&kp COLON>;
            layers = <_BASE _SYM _NAV>;
        };

        combo_SEMI {
            timeout-ms = <45>;
            key-positions = <LBR LBM>;
            bindings = <&kp SEMI>;
            layers = <_BASE _SYM _NAV>;
        };

        combo_SQT {
            timeout-ms = <45>;
            key-positions = <LTM LTR>;
            bindings = <&kp SQT>;
            layers = <_BASE _SYM>;
        };

        combo_DQT {
            timeout-ms = <45>;
            key-positions = <RTM RTR>;
            bindings = <&kp DQT>;
            layers = <_BASE _SYM>;
        };
            
        combo_GT {
            timeout-ms = <45>;
            key-positions = <RTI RTC>;
            bindings = <&kp GT>;
            layers = <_BASE _SYM>;
        };

        combo_LT {
            timeout-ms = <45>;
            key-positions = <LTI LTC>;
            bindings = <&kp LT>;
            layers = <_BASE _SYM>;
        };

        combo_FSLH {
            timeout-ms = <45>;
            key-positions = <RMI RMC>;
            bindings = <&kp FSLH>;
            layers = <_BASE _SYM _NAV>;
        };

        combo_BSLH {
            timeout-ms = <45>;
            key-positions = <LMI LMC>;
            bindings = <&kp BSLH>;
            layers = <_BASE _SYM _NAV>;
        };
    };

    behaviors {
        // td_fnav: tap_dance_fnav {
        //     compatible = "zmk,behavior-tap-dance";
        //     label = "LOCK_F_NAV";
        //     #binding-cells = <0>;
        //     tapping-term-ms = <250>;
        //     bindings = <&mo_F_NAV>, <&to_F_NAV>;
        // };
 
        // td_btnp: tap_dance_btnp {
        //     compatible = "zmk,behavior-tap-dance";
        //     label = "LOCK_BT_NP";
        //     #binding-cells = <0>;
        //     tapping-term-ms = <250>;
        //     bindings = <&mo_BT_NP>, <&to_BT_NP>;
        // };

    //    ht_fnav: hold_tap_fnav {
    //        compatible = "zmk,behavior-hold-tap";
    //        label = "SL_F_NAV";
    //        #binding-cells = <2>;
    //        flavor = "balanced";
    //        tapping-term-ms = <180>;
    //        quick-tap-ms = <180>;
    //        bindings = <&mo_F_NAV>, <&sl>;
    //    };

    //    ht_btnp: hold_tap_btnp {
    //        compatible = "zmk,behavior-hold-tap";
    //        label = "SL_BT_NP";
    //        #binding-cells = <2>;
    //        flavor = "balanced";
    //        tapping-term-ms = <180>;
    //        quick-tap-ms = <180>;
    //        bindings = <&mo_BT_NP>, <&sl>;
    //    };

        // copy_cut: copy_cut {
        //     compatible = "zmk,behavior-tap-dance";
        //     label = "COPY_CUT";
        //     #binding-cells = <0>;
        //     tapping-term-ms = <200>;
        //     bindings = <&kp C>, <&kp X>;
        // };

        win_cp: win_cp {
            compatible = "zmk,behavior-tap-dance";
            label = "CTRL_COPY_PASTA";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp LC(C)>, <&kp LC(V)>;
        };

        mac_cp: mac_cp {
            compatible = "zmk,behavior-tap-dance";
            label = "GUI_COPY_PASTA";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp LG(C)>, <&kp LG(V)>;
        };

        // ctrl_x: ctrl_x {
        //     compatible = "zmk,behavior-hold-tap";
        //     label = "CTRL_CUT_HOLD";
        //     #binding-cells = <2>;
        //     flavor = "tap-preferred";
        //     tapping-term-ms = <400>;
        //     bindings = <&kp>, <&win_cp>;
        // };

        // gui_x: gui_x {
        //     compatible = "zmk,behavior-hold-tap";
        //     label = "GUI_CUT_HOLD";
        //     #binding-cells = <2>;
        //     flavor = "tap-preferred";
        //     tapping-term-ms = <400>;
        //     bindings = <&kp>, <&mac_cp>;
        // };

        /* left-hand HRMs */
        hml: hrm_left {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HRM";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;                // repeat on tap-into-hold
            global-quick-tap;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        /* right-hand HRMs */
        hmr: hrm_right {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HRM";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;                // repeat on tap-into-hold
            global-quick-tap;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        bst: backspace-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "BSPC_TAP_SYM_HOLD";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <170>;
            // global-quick-tap;
            bindings = <&mo_SYM>, <&kp>;
        };

        spt: space-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "SPC_TAP_NAV_HOLD";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <170>;
            // global-quick-tap;
            bindings = <&mo_NAV>, <&kp>;
        };

        comt: comma-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "COMMA_TAP_NAV_HOLD";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <170>;
            // global-quick-tap;
            bindings = <&mo_NAV>, <&com_sem>;
        };

        dott: dot-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "DOT_TAP_BTF_HOLD";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <170>;
            // global-quick-tap;
            bindings = <&mo_BTF>, <&dot_col>;
        };

        ht: hold-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <170>;
            // global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        // rch: reset-combo-hold {
        //     compatible = "zmk,behavior-hold-tap";
        //     label = "RESET_COMBO_HOLD";
        //     #binding-cells = <2>;
        //     flavor = "tap-preferred";
        //     tapping-term-ms = <2500>;
        //     bindings = <&to_BOOT>, <&sys_reset>;
        // };

        com_sem: comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMI";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;
            mods = <(MOD_LSFT)>;
        };

        // com_dot: comma_dot {
        //     compatible = "zmk,behavior-mod-morph";
        //     label = "COMMA_DOT";
        //     #binding-cells = <0>;
        //     bindings = <&kp COMMA>, <&kp DOT>;
        //     mods = <(MOD_LSFT)>;
        // };

        dot_col: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT)>;
        };
        
        // sem_col: semicolon_colon {
        //     compatible = "zmk,behavior-mod-morph";
        //     label = "SEMI_COLON";
        //     #binding-cells = <0>;
        //     bindings = <&kp SEMI>, <&kp COLON>;
        //     mods = <(MOD_LSFT)>;
        // };
        
        // qmk_exc: qmark_excl {
        //     compatible = "zmk,behavior-mod-morph";
        //     label = "QMARK_EXCL";
        //     #binding-cells = <0>;
        //     bindings = <&kp QMARK>, <&kp EXCL>;
        //     mods = <(MOD_LSFT)>;
        // };

        // plus_multi: plus_multiply {
        //     compatible = "zmk,behavior-tap-dance";
        //     label = "PLUS_MULTIPLY";
        //     #binding-cells = <0>;
        //     tapping-term-ms = <400>;
        //     bindings = <&kp KP_PLUS>, <&kp KP_MULTIPLY>;
        // };

        // minus_div: minus_divide {
        //     compatible = "zmk,behavior-tap-dance";
        //     label = "MINUS_DIVIDE";
        //     #binding-cells = <0>;
        //     tapping-term-ms = <400>;
        //     bindings = <&kp KP_MINUS>, <&kp KP_DIVIDE>;
        // };

        // sqt_lt: sqt_lt {
        //     compatible = "zmk,behavior-mod-morph";
        //     label = "SQT_LT";
        //     #binding-cells = <0>;
        //     bindings = <&kp SQT>, <&kp LT>;
        //     mods = <(MOD_LSFT)>;
        // };
        
        // dqt_gt: dqt_gt {
        //     compatible = "zmk,behavior-mod-morph";
        //     label = "DQT_GT";
        //     #binding-cells = <0>;
        //     bindings = <&kp DQT>, <&kp GT>;
        //     mods = <(MOD_LSFT)>;
        // };
    };

    keymap {
        compatible = "zmk,keymap";

                base_layer {
// -------------------------------    -------------------------------
// |  Q  |  F  |  V  |  P  |  B  |    |  K  |  L  |  U  |  Y  |  J  |
// |  A  |  R  |  S  |  T  |  G  |    |  M  |  N  |  E  |  I  |  O  |
// | ' " |  Z  |  C  |  D  | , < |    | . > |  H  |  W  |  X  | ; : |
//            | _SYM(BSPC) | , ; |    | . : | _NAV(SPC) |
                        bindings = <
   &hml RALT Q &kp F        &kp V        &kp P       &kp B     &kp K     &kp L        &kp U       &kp Y        &hmr RALT J
   &hml LALT A &hml LCTRL R &hml LSHFT S &hml LGUI T &kp G     &kp M     &hmr LGUI N &hmr LSHFT E &hmr LCTRL I &hmr LALT O 
   &kp SQT     &kp Z        &kp C        &kp D       &kp COMMA &kp DOT   &kp H        &kp W       &kp X        &kp SEMI
                                     &bst 0 BSPC  &com_sem     &dot_col  &spt 0 SPACE
                        >;
                };

                sym_layer {
// -------------------------------    -------------------------------
// |  !  |  @  |  #  |  $  |  &  |    | ` ~ |  7  |  8  |  9  |  0  |
// |  ?  |  *  |  -  |  +  |  %  |    |  ^  |  4  |  5  |  6  |  .  |
// |  \  |  |  |  _  |  =  | [ { |    | ] } |  1  |  2  |  3  |  /  |
//                   |     |     |    | BSPC | SPC |
                        bindings = <
   &hml RALT EXCL  &kp AT           &kp HASH         &kp DLLR        &kp AMPS      &kp GRAVE &kp N7        &kp N8       &kp N9        &hmr RALT N0
   &hml LALT QMARK &hml LCTRL ASTRK &hml LSHFT MINUS &hml LGUI PLUS  &kp PRCNT     &kp CARET &hmr LGUI N4 &hmr LSHFT N5 &hmr LCTRL N6 &hmr LALT KP_DOT
   &kp BSLH        &kp PIPE         &kp UNDER        &kp EQUAL       &kp LBKT      &kp RBKT  &kp N1        &kp N2       &kp N3        &kp SLASH
                                                               &none &none         &kp BSPC  &kp SPACE
                        >;
                };

                nav_layer {
// ----------------------------------    ------------------------------------
// | ESC | C_CP |  X   | G_CP | APP |    | INS  | HOME |  UP   | END  | DEL |
// | TAB | VOL- | MUTE | VOL+ | PRN |    | BSPC | LEFT | sSHFT | RGHT | RET |
// |     | PREV | PLAY | NEXT |     |    |      | PGUP | DOWN  | PGDN |     |
//                    |      | BSPC |    | BSPC | SHFT(SPC) |
                        bindings = <
   &kp ESC       &win_cp             &kp X             &mac_cp            &kp K_APP          &kp INS   &kp HOME       &kp UP    &kp END          &kp DEL
   &hml LALT TAB &hml LCTRL C_VOL_DN &hml LSHFT C_MUTE &hml LGUI C_VOL_UP &kp PSCRN          &kp BSPC  &hmr LGUI LEFT &sk LSHFT &hmr LCTRL RIGHT &hmr LALT RET
   &none         &kp C_PREV          &kp C_PP          &kp C_NEXT         &none              &none     &kp PG_UP      &kp DOWN  &kp PG_DN        &none
                                                                   &none  &kp BSPC           &kp BSPC  &ht LSHFT SPACE 
                        >;
                };
                
                btf_layer {
// --------------------------------    ------------------------------------
// | F1 |  F2   | F3  | F4  | F5  |    |  BT1  | BT2  | BT3 |  BT4  | BT5 |
// | F6 |  F7   | F8  | F9  | F10 |    | BTCLR | SHFT | GUI | CTRL  | ALT |
// |    | RESET | F11 | F12 |     |    |       | USB  | RGB | RESET |     |
//                    |     |     |    |     |     |
                        bindings = <
   &kp F1 &kp F2     &kp F3  &kp F4  &kp F5        &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2    &bt BT_SEL 3 &bt BT_SEL 4
   &kp F6 &kp F7     &kp F8  &kp F9  &kp F10       &bt BT_CLR   &kp LGUI     &kp LSHFT       &kp LCTRL    &kp LALT
   &none  &sys_reset &kp F11 &kp F12 &none         &none        &out OUT_TOG &rgb_ug RGB_TOG &sys_reset   &none
                               &none &none         &none &none
                        >;
                };                
    };
};