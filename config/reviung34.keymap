/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include "keypos_34keys.h"

#define _BASE    0
#define _NAV     1
#define _SYM     2
#define _BTF     3

#define RGB_BASE RGB_COLOR_HSB(250,20,3)
#define RGB_SYM RGB_COLOR_HSB(20,100,4)
#define RGB_NAV RGB_COLOR_HSB(120,80,3)
#define RGB_BTF RGB_COLOR_HSB(230,100,4)

/ {
// ------------------------- MACROS --------------------------------
    macros {
        to_BASE: to_BASE {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&rgb_ug RGB_BASE>
                , <&tog _NAV>
                ;
        };

        // mo_SYM: mo_SYM {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&macro_tap &rgb_ug RGB_SYM>
        //         , <&macro_press &mo _SYM>
        //         , <&macro_pause_for_release>
        //         , <&macro_tap &rgb_ug RGB_BASE>
        //         , <&macro_release &mo _SYM>
        //         ;
        // };

        // to_SYM: to_SYM {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&rgb_ug RGB_SYM>
        //         , <&to _SYM>
        //         ;
        // };

        to_NAV: to_NAV {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&rgb_ug RGB_NAV>
                , <&tog _NAV>
                ;
        };

        // mo_NAV: mo_NAV {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&macro_tap &rgb_ug RGB_NAV>
        //         , <&macro_press &mo _NAV>
        //         , <&macro_pause_for_release>
        //         , <&macro_tap &rgb_ug RGB_BASE>
        //         , <&macro_release &mo _NAV>
        //         ;
        // };

        mo_BTF: mo_BTF {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_tap &rgb_ug RGB_BTF>
                , <&macro_press &mo _BTF>
                , <&macro_pause_for_release>
                , <&macro_tap &rgb_ug RGB_BASE>
                , <&macro_release &mo _BTF>
                ;
        };

        to_BOOT: to_BOOT {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_COLOR_HSB(0,100,50)>
                , <&rgb_ug RGB_ON>
                , <&bootloader>
                ;
        };
    };

    combos {
        compatible = "zmk,combos";
// ------------------------- LAYER COMBOS --------------------------------
        combo_BOOT {
            timeout-ms = <50>;
            key-positions = <LMC RMC>;
            bindings = <&to_BOOT>;
            layers = <_BTF>;
        };

        combo_BTF {
            timeout-ms = <50>;
            key-positions = <LHO RHO>;
            bindings = <&mo_BTF>;
        };

        combo_NAVR {
            timeout-ms = <50>;
            key-positions = <RMI RMM RMR>;
            bindings = <&to_NAV>;
            layers = <_BASE>;
        };

        combo_BASER {
            timeout-ms = <50>;
            key-positions = <RMI RMM RMR>;
            bindings = <&to_BASE>;
            layers = <_NAV>;
        };

        combo_NAVL {
            timeout-ms = <50>;
            key-positions = <LMI LMM LMR>;
            bindings = <&to_NAV>;
            layers = <_BASE>;
        };

        combo_BASEL {
            timeout-ms = <50>;
            key-positions = <LMI LMM LMR>;
            bindings = <&to_BASE>;
            layers = <_NAV>;
        };

// ------------------------- MODS COMBOS --------------------------------
        combo_CAPS {
            timeout-ms = <50>;
            key-positions = <LMI RMI>;
            bindings = <&caps_word>;
            require-prior-idle-ms = <200>;
            layers = <_BASE>;
        };

        // combo_RALTL {
        //     timeout-ms = <40>;
        //     key-positions = <LMP LTP>;
        //     bindings = <&kp RALT>;
        //     //layers = <_BASE>;
        // };

        // combo_RALTR {
        //     timeout-ms = <40>;
        //     key-positions = <LMP RTP>;
        //     bindings = <&kp RALT>;
        //     //layers = <_BASE>;
        // };

// ------------------------- CHARACTER COMBOS --------------------------------
        // combo_MUTE {
        //     timeout-ms = <40>;
        //     key-positions = <RMI RMR>;
        //     bindings = <&kp C_MUTE>;
        //     // layers = <_BASE _SYM>;
        // };

        // combo_LPAR {
        //     timeout-ms = <40>;
        //     key-positions = <LMM LMI>;
        //     bindings = <&kp LPAR>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_RPAR {
        //     timeout-ms = <40>;
        //     key-positions = <RMI RMM>;
        //     bindings = <&kp RPAR>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_LBRC {
        //     timeout-ms = <40>;
        //     key-positions = <LTM LTI>;
        //     bindings = <&kp LBRC>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_RBRC {
        //     timeout-ms = <40>;
        //     key-positions = <RTI RTM>;
        //     bindings = <&kp RBRC>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_LBKT {
        //     timeout-ms = <40>;
        //     key-positions = <LBM LBI>;
        //     bindings = <&kp LBKT>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_RBKT {
        //     timeout-ms = <40>;
        //     key-positions = <RBI RBM>;
        //     bindings = <&kp RBKT>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_GT {
        //     timeout-ms = <45>;
        //     key-positions = <RBM RBR>;
        //     bindings = <&kp GT>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_LT {
        //     timeout-ms = <45>;
        //     key-positions = <LBM LBR>;
        //     bindings = <&kp LT>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_FSLH {
        //     timeout-ms = <45>;
        //     key-positions = <RMM RMR>;
        //     bindings = <&kp FSLH>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_BSLH {
        //     timeout-ms = <45>;
        //     key-positions = <LMR LMM>;
        //     bindings = <&kp BSLH>;
        //     layers = <_BASE _SYM>;
        // };
    };

    behaviors {
// ------------------------- TAP-DANCES --------------------------------
        win_cp: win_cp {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp LC(C)>, <&kp LC(V)>;
        };

        mac_cp: mac_cp {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp LG(C)>, <&kp LG(V)>;
        };

// ------------------------- HOLD-TAPS --------------------------------
        /* left-hand HRMs */
        hml: hrm_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <120>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        /* right-hand HRMs */
        hmr: hrm_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <120>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        hsl: hrs_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <120>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        hsr: hrs_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <120>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        bst: backspace-tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <170>;
            //require-prior-idle-ms = <100>;
            bindings = <&mo>, <&kp>;
        };

        spt: space-tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <170>;
            //require-prior-idle-ms = <100>;
            bindings = <&mo>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

                base_layer {
// -------------------------------    -------------------------------
// |  B  |  C  |  D  |  L  |  W  |    |  F  |  M  |  O  |  U  |  Y  |
// |  N  |  S  |  T  |  R  |  J  |    |  G  |  H  |  A  |  E  |  I  |
// | WCP |  Z  |  P  |  V  |  <  |    |  >  |  K  |  Q  |  X  | mCP |
//            | _SYM(BSPC) |  =  |    |  +  | _NAV(SPC) |
                        bindings = <
   &kp B        &kp C        &kp D       &kp L        &kp W       &kp F  &kp M        &kp O       &kp U        &kp Y
   &hml LALT N  &hml LCTRL S &hml LGUI T &hsl LSHFT R &kp J       &kp G  &hsr LSHFT H &hmr LGUI A &hmr LCTRL E &hmr LALT I
   &win_cp      &kp Z        &kp P       &kp V        &kp LT      &kp GT &kp K        &kp Q       &kp X        &mac_cp
                                   &bst _SYM BSPC  &kp EQUAL      &kp PLUS  &spt _NAV SPACE
                        >;
                };

                nav_layer {
// -------------------------------    ----------------------------------
// | ESC |  7  |  8  |  9  | TAB |    | INS | HOME |  UP  | END  | DEL |
// |  0  |  4  |  5  |  6  |  ., |    | APP | LEFT | SPC  | RGHT | RET |
// |  v. |  1  |  2  |  3  |  v- |    | mCP | PGUP | DOWN | PGDN |  v. |
//            | _SYM(BSPC) |     |    |     | SHFT |
                        bindings = <
   &kp ESC       &kp N7        &kp N8       &kp N9        &kp TAB         &kp INS      &kp HOME        &kp UP          &kp END          &kp DEL
   &hml LALT N0  &hml LCTRL N4 &hml LGUI N5 &hsl LSHFT N6 &kp KP_DOT      &kp PSCRN    &hsr LSHFT LEFT &hmr LGUI SPACE &hmr LCTRL RIGHT &hmr LALT RET
   &kp C_MUTE    &kp N1        &kp N2       &kp N3        &kp C_VOL_DN    &kp C_VOL_UP &kp PG_UP       &kp DOWN        &kp PG_DN        &kp K_APP
                                           &bst _SYM BSPC &none           &none  &kp LSHFT
                        >;
                };
                
                sym_layer {
// -------------------------------    -------------------------------
// |  \  |  |  |  =  |  _  |  {  |    |  }  |  "  |  ;  |  :  |  !  |
// |  /  |  *  |  +  |  -  |  (  |    |  )  |  '  |  ,  |  .  |  ?  |
// |  `  |  &  |  ^  |  %  |  [  |    |  ]  |  @  |  #  |  $  |  ~  |
//                  | BSPC |     |    |     | _NAV(SPC) |
                        bindings = <
   &kp BSLH        &kp PIPE        &kp EQUAL      &kp UNDER        &kp LBRC      &kp RBRC &kp DQT        &kp SEMI        &kp COLON      &kp EXCL
   &hml LALT SLASH &hml LCTRL STAR &hml LGUI PLUS &hsl LSHFT MINUS &kp LPAR      &kp RPAR &hsr LSHFT SQT &hmr LGUI COMMA &hmr LCTRL DOT &hmr LALT QMARK
   &kp GRAVE       &kp AMPS        &kp CARET      &kp PRCNT        &kp LBKT      &kp RBKT &kp AT         &kp HASH        &kp DLLR       &kp TILDE
                                                         &kp BSPC  &none         &none   &spt _NAV SPACE
                        >;
                };
                
                btf_layer {
// ----------------------------    ---------------------------------
// | ESC | F7 | F8 | F9 | F11 |    | BT1 | BT2  | BT3 | BT4  | BT5 |
// | F10 | F4 | F5 | F6 | F12 |    |     | SHFT | GUI | CTRL | ALT |
// |     | F1 | F2 | F3 |     |    |     | USB  | RGB | BT-  |     |
//                |     |     |    |     |     |
                        bindings = <
   &kp ESC &kp F7 &kp F8 &kp F9 &kp F11   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2    &bt BT_SEL 3 &bt BT_SEL 4
   &kp F10 &kp F4 &kp F5 &kp F6 &kp F12   &none        &kp LSHFT    &kp LGUI        &kp LCTRL    &kp LALT
   &none   &kp F1 &kp F2 &kp F3 &none     &none        &out OUT_TOG &rgb_ug RGB_TOG &bt BT_CLR   &none
                          &none &none     &none &none
                        >;
                };                
    };
};
